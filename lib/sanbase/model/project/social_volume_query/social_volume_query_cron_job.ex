defmodule Sanbase.Model.Project.SocialVolumeQuery.CronJob do
  alias Sanbase.Model.Project
  alias Sanbase.Model.Project.SocialVolumeQuery

  def run() do
    project_id_to_autogen_query_map = project_id_to_autogen_query_map()
    project_id_to_query_struct_map = project_id_to_query_struct_map()

    Enum.map(project_id_to_autogen_query_map, fn {project_id, autogen_query} ->
      case Map.get(project_id_to_query_struct_map, project_id) do
        %SocialVolumeQuery{autogenerated_query: ^autogen_query} ->
          nil

        %SocialVolumeQuery{} = struct ->
          SocialVolumeQuery.changeset(struct, %{autogenerated_query: autogen_query})

        _ ->
          SocialVolumeQuery.changeset(
            %SocialVolumeQuery{},
            %{
              project_id: project_id,
              autogenerated_query: autogen_query
            }
          )
      end
    end)
    |> Enum.reject(&is_nil/1)
    |> insert_all()
  end

  defp insert_all(changesets) do
    changesets
    |> Enum.with_index()
    |> Enum.reduce(Ecto.Multi.new(), fn {changeset, offset}, multi ->
      multi
      |> Ecto.Multi.insert(offset, changeset,
        conflict_target: [:project_id],
        on_conflict: :replace_all
      )
    end)
    |> Sanbase.Repo.transaction()
    |> case do
      {:ok, _} -> :ok
      {:error, _name, error, _changes_so_far} -> {:error, error}
    end
  end

  defp project_id_to_query_struct_map() do
    Sanbase.Repo.all(SocialVolumeQuery)
    |> Sanbase.Repo.preload([:project])
    |> Map.new(fn %SocialVolumeQuery{} = svq -> {svq.project_id, svq} end)
  end

  defp project_id_to_autogen_query_map() do
    all_projects =
      Project.List.projects(preload: [:social_volume_query], include_hidden_projects?: true)

    Map.new(
      all_projects,
      fn
        %Project{} = project ->
          exclusion_string =
            all_projects
            |> filter_similar_projects(project)
            |> Enum.map(fn excluded_project -> "NOT \"#{excluded_project.name}\"" end)
            |> Enum.join(" ")

          query = SocialVolumeQuery.default_query(project)

          {project.id, String.trim(query <> " " <> exclusion_string)}
      end
    )
  end

  defp filter_similar_projects(all_projects, project) do
    %Project{ticker: project_ticker, slug: project_slug, name: project_name} = project

    Enum.filter(all_projects, fn other_project ->
      %Project{name: other_name, slug: other_slug} = other_project
      name_tokens = String.downcase(other_name) |> String.split([" ", "-"])
      project_name = String.downcase(project_name)

      if project_slug != other_slug do
        Enum.any?(name_tokens, fn element ->
          element == project_name || element == project_slug || element == project_ticker
        end)
      end
    end)
  end
end
